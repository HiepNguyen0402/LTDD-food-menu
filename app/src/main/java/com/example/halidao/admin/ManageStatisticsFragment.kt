package com.example.halidao

import DatabaseHelper
import GmailSender
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.halidao.adapter.StatisticsAdapter
import com.example.halidao.data.model.Statistics
import com.github.mikephil.charting.charts.BarChart
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.charts.PieChart
import com.github.mikephil.charting.data.*
import org.apache.poi.xssf.usermodel.XSSFWorkbook
import java.io.File
import java.io.FileOutputStream
import com.example.halidao.R
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class ManageStatisticsFragment : Fragment() {

    private lateinit var txtTotalRevenue: TextView
    private lateinit var txtTotalOrders: TextView
    private lateinit var recyclerView: RecyclerView
    private lateinit var btnExportExcel: Button
    private lateinit var barChart: BarChart
    private lateinit var pieChart: PieChart
    private lateinit var lineChart: LineChart
    private lateinit var databaseHelper: DatabaseHelper
    private lateinit var adapter: StatisticsAdapter

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        val view = inflater.inflate(R.layout.fragment_manage_statistics, container, false)

        txtTotalRevenue = view.findViewById(R.id.txtTotalRevenue)
        txtTotalOrders = view.findViewById(R.id.txtTotalOrders)
        recyclerView = view.findViewById(R.id.recyclerViewStatistics)
        btnExportExcel = view.findViewById(R.id.btnExportExcel)
        barChart = view.findViewById(R.id.barChartStatistics)
        pieChart = view.findViewById(R.id.pieChartStatistics)
        lineChart = view.findViewById(R.id.lineChartStatistics)

        databaseHelper = DatabaseHelper(requireContext())
        loadStatistics()

        btnExportExcel.setOnClickListener {
            exportToExcel()
        }


        return view
    }


    private fun loadStatistics() {
        val statisticsList = databaseHelper.getRevenueStatistics()
        val totalOrders = databaseHelper.getTotalOrders() // G·ªçi h√†m ƒë·ªÉ l·∫•y t·ªïng s·ªë ƒë∆°n h√†ng

        if (statisticsList.isEmpty()) {
            txtTotalRevenue.text = "Ch∆∞a c√≥ d·ªØ li·ªáu doanh thu"
            txtTotalOrders.text = "Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o" // Hi·ªÉn th·ªã n·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng
            barChart.clear()
            pieChart.clear()
            lineChart.clear()
            barChart.setNoDataText("Kh√¥ng c√≥ d·ªØ li·ªáu")
            pieChart.setNoDataText("Kh√¥ng c√≥ d·ªØ li·ªáu")
            lineChart.setNoDataText("Kh√¥ng c√≥ d·ªØ li·ªáu")
        } else {
            txtTotalRevenue.text = "T·ªïng doanh thu: ${databaseHelper.getTotalRevenue()} VND"
            txtTotalOrders.text = "T·ªïng s·ªë ƒë∆°n h√†ng: $totalOrders" // C·∫≠p nh·∫≠t UI hi·ªÉn th·ªã t·ªïng s·ªë ƒë∆°n h√†ng
            loadBarChart(statisticsList)
            loadPieChart()
            loadLineChart()
        }

        adapter = StatisticsAdapter(requireContext(), statisticsList)
        recyclerView.layoutManager = LinearLayoutManager(requireContext())
        recyclerView.adapter = adapter
    }



    private fun loadBarChart(statisticsList: List<Statistics>) {
        val entries = statisticsList.mapIndexed { index, data ->
            BarEntry(index.toFloat(), data.revenue.toFloat())
        }

        val dataSet = BarDataSet(entries, "Doanh thu theo th√°ng").apply {
            color = Color.BLUE
            valueTextColor = Color.BLACK
        }

        val barData = BarData(dataSet)
        barChart.data = barData
        barChart.description.isEnabled = false
        barChart.invalidate()
    }

    private fun loadPieChart() {
        val pieEntries = mutableListOf<PieEntry>()
        val revenueByCategory = databaseHelper.getRevenueByCategory()

        revenueByCategory.forEach { (category, revenue) ->
            pieEntries.add(PieEntry(revenue.toFloat(), category))
        }

        val dataSet = PieDataSet(pieEntries, "Doanh thu theo danh m·ª•c").apply {
            colors = listOf(Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW)
            valueTextColor = Color.BLACK
        }

        val pieData = PieData(dataSet)
        pieChart.data = pieData
        pieChart.description.isEnabled = false
        pieChart.invalidate()
    }

    private fun loadLineChart() {
        val entries = databaseHelper.getDailyRevenue().mapIndexed { index, data ->
            Entry(index.toFloat(), data.second.toFloat())
        }

        val dataSet = LineDataSet(entries, "Xu h∆∞·ªõng doanh thu theo ng√†y").apply {
            color = Color.MAGENTA
            valueTextColor = Color.BLACK
        }

        val lineData = LineData(dataSet)
        lineChart.data = lineData
        lineChart.description.isEnabled = false
        lineChart.invalidate()
    }
    private fun exportToExcel() {
        val sharedPref = requireActivity().getSharedPreferences("UserPrefs", Context.MODE_PRIVATE)
        val userEmail = sharedPref.getString("email", null)

        if (userEmail.isNullOrEmpty()) {
            Toast.makeText(requireContext(), "Kh√¥ng t√¨m th·∫•y email c·ªßa b·∫°n. H√£y ƒëƒÉng nh·∫≠p l·∫°i!", Toast.LENGTH_SHORT).show()
            return
        }

        try {
            val workbook = XSSFWorkbook()

            // üìå **1Ô∏è‚É£ Sheet 1: T·ªïng quan doanh thu**
            val sheet1 = workbook.createSheet("Th·ªëng k√™ chi ti·∫øt")
            val headerRow1 = sheet1.createRow(0)
            headerRow1.createCell(0).setCellValue("Ng√†y")
            headerRow1.createCell(1).setCellValue("T·ªïng ƒë∆°n h√†ng")
            headerRow1.createCell(2).setCellValue("Doanh thu (VND)")

            val revenueList = databaseHelper.getDailyRevenue()
            for ((index, data) in revenueList.withIndex()) {
                val row = sheet1.createRow(index + 1)
                row.createCell(0).setCellValue(data.first) // Ng√†y
                row.createCell(1).setCellValue(databaseHelper.getTotalOrders().toDouble()) // T·ªïng ƒë∆°n h√†ng
                row.createCell(2).setCellValue(data.second.toDouble()) // Doanh thu
            }




            // üìå **3Ô∏è‚É£ Sheet 3: M√≥n ƒÉn b√°n ch·∫°y nh·∫•t**
            val sheet3 = workbook.createSheet("M√≥n ƒÉn b√°n ch·∫°y")
            val headerRow3 = sheet3.createRow(0)
            headerRow3.createCell(0).setCellValue("T√™n m√≥n")
            headerRow3.createCell(1).setCellValue("S·ªë l·∫ßn ƒë·∫∑t")
            headerRow3.createCell(2).setCellValue("T·ªïng doanh thu (VND)")

            val bestSellingFoods = databaseHelper.getBestSellingFoods()
            for ((index, food) in bestSellingFoods.withIndex()) {
                val row = sheet3.createRow(index + 1)
                row.createCell(0).setCellValue(food.tenMon)
                row.createCell(1).setCellValue(food.soLuong.toDouble()) // S·ªë l·∫ßn ƒë·∫∑t
                row.createCell(2).setCellValue(food.tongTien.toDouble()) // Doanh thu t·ª´ m√≥n ƒë√≥
            }

           

            // üìå **5Ô∏è‚É£ Sheet 5: T·ªïng s·ªë l∆∞·ª£ng b√°n theo t·ª´ng m√≥n**
            val sheet5 = workbook.createSheet("T·ªïng s·ªë l∆∞·ª£ng b√°n")
            val headerRow5 = sheet5.createRow(0)
            headerRow5.createCell(0).setCellValue("T√™n m√≥n")
            headerRow5.createCell(1).setCellValue("T·ªïng s·ªë l∆∞·ª£ng b√°n")

            val totalFoodSales = databaseHelper.getTotalFoodSales()
            for ((index, food) in totalFoodSales.withIndex()) {
                val row = sheet5.createRow(index + 1)
                row.createCell(0).setCellValue(food.tenMon)
                row.createCell(1).setCellValue(food.soLuong.toDouble()) // T·ªïng s·ªë l∆∞·ª£ng ƒë√£ b√°n
            }
            // üìå **1Ô∏è‚É£ Th·ªëng k√™ doanh thu theo ng√†y trong tu·∫ßn**



            // üìå **2Ô∏è‚É£ Hi·ªáu su·∫•t s·ª≠ d·ª•ng b√†n**
            val sheet7 = workbook.createSheet("Hi·ªáu su·∫•t s·ª≠ d·ª•ng b√†n")
            val headerRow7 = sheet7.createRow(0)
            headerRow7.createCell(0).setCellValue("M√£ b√†n")
            headerRow7.createCell(1).setCellValue("S·ªë l·∫ßn s·ª≠ d·ª•ng")

            val tableUsage = databaseHelper.getTableUsageStats()
            for ((index, data) in tableUsage.withIndex()) {
                val row = sheet7.createRow(index + 1)
                row.createCell(0).setCellValue(data.first.toDouble()) // M√£ b√†n
                row.createCell(1).setCellValue(data.second.toDouble()) // S·ªë l·∫ßn s·ª≠ d·ª•ng
            }

            // üìå **L∆∞u file**
            val folder = File(requireContext().getExternalFilesDir(null), "ThongKe")
            if (!folder.exists()) folder.mkdirs()
            val file = File(folder, "ThongKe_ChiTiet.xlsx")

            FileOutputStream(file).use { fos ->
                workbook.write(fos)
            }
            workbook.close()

            Toast.makeText(requireContext(), "ƒê√£ xu·∫•t file Excel: ${file.absolutePath}", Toast.LENGTH_LONG).show()

            // üìå **G·ª≠i file qua Gmail**
            sendEmailWithAttachment(userEmail, file)

        } catch (e: Exception) {
            e.printStackTrace()
            Toast.makeText(requireContext(), "L·ªói khi xu·∫•t file Excel", Toast.LENGTH_SHORT).show()
        }
    }

    fun getOrderStatusText(status: Int): String {
        return when (status) {
            1 -> "ƒêang ch·ªù x·ª≠ l√Ω"
            2 -> "ƒêang giao h√†ng"
            3 -> "ƒê√£ ho√†n th√†nh"
            4 -> "ƒê√£ h·ªßy"
            else -> "Kh√¥ng x√°c ƒë·ªãnh"
        }
    }


    private fun sendEmailWithAttachment(email: String, file: File) {
        CoroutineScope(Dispatchers.IO).launch { // Ch·∫°y tr√™n background thread
            try {
                val sender = GmailSender("meocandam@gmail.com", "fjhhuqvyiewtcwlh")
                sender.sendMail(
                    "B√°o c√°o doanh thu",
                    "G·ª≠i b·∫°n b√°o c√°o doanh thu theo th√°ng.",
                    email,
                    file.absolutePath
                )
                CoroutineScope(Dispatchers.Main).launch {
                    Toast.makeText(requireContext(), "Email ƒë√£ ƒë∆∞·ª£c g·ª≠i!", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                e.printStackTrace()
                CoroutineScope(Dispatchers.Main).launch {
                    Toast.makeText(requireContext(), "G·ª≠i email th·∫•t b·∫°i!", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

}
