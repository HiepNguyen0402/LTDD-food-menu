package com.example.halidao.nhanvien

import DatabaseHelper
import OrderDetail
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.Color
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.ImageView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.halidao.R
import com.google.android.material.tabs.TabLayout
import com.example.halidao.datmon.FoodActivity
import com.google.zxing.BarcodeFormat
import com.google.zxing.qrcode.QRCodeWriter
import com.squareup.picasso.Picasso
import java.nio.charset.StandardCharsets
import java.util.Locale

class OrderDetailActivity : AppCompatActivity() {
    private lateinit var tabLayout: TabLayout
    private lateinit var recyclerView: RecyclerView
    private lateinit var btnAction: Button
    private lateinit var btnAddFood: Button
    private lateinit var dbHelper: DatabaseHelper
    private var orderId: Int = -1
    private lateinit var adapter: OrderDetailAdapter
    private var idBan: Int = -1
    private var selectedOrderDetailId: Int? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_order_detail)

        dbHelper = DatabaseHelper(this)
        tabLayout = findViewById(R.id.tabLayout)
        recyclerView = findViewById(R.id.recyclerViewOrderDetail)
        btnAction = findViewById(R.id.btnAction)
        btnAddFood = findViewById(R.id.btnAddFood)

        // ‚úÖ ƒê·∫£m b·∫£o l·∫•y ƒë√∫ng idBan t·ª´ Intent
        idBan = intent.getIntExtra("ID_BAN", -1)
        if (idBan == -1) {
            Toast.makeText(this, "L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c b√†n!", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        // ‚úÖ Ch·ªâ l·∫•y orderId m·ªôt l·∫ßn
        val latestOrderId = dbHelper.getLatestUnpaidOrder(idBan)
        if (latestOrderId != orderId) {
            Log.d("OrderDetailActivity", "üîÑ C·∫≠p nh·∫≠t orderId t·ª´ $orderId th√†nh $latestOrderId")
            orderId = latestOrderId
        }

        Log.d("OrderDetailActivity", "üéØ B√†n: $idBan, Order ID: $orderId")

        recyclerView.layoutManager = LinearLayoutManager(this)

        tabLayout.addTab(tabLayout.newTab().setText("Ch∆∞a l√†m"))
        tabLayout.addTab(tabLayout.newTab().setText("ƒêang l√†m"))
        tabLayout.addTab(tabLayout.newTab().setText("ƒê√£ xong"))

        tabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {
            override fun onTabSelected(tab: TabLayout.Tab?) {
                val position = tab?.position ?: 0
                loadOrderDetails(position)
                btnAddFood.visibility = if (position == 0) View.VISIBLE else View.GONE
            }
            override fun onTabUnselected(tab: TabLayout.Tab?) {}
            override fun onTabReselected(tab: TabLayout.Tab?) {}
        })

        if (orderId != -1) {
            loadOrderDetails(0)
        }

        btnAction.setOnClickListener {
            when (tabLayout.selectedTabPosition) {
                0, 1 -> {
                    selectedOrderDetailId?.let { orderDetailId ->
                        val currentStatus = if (tabLayout.selectedTabPosition == 0) 4 else 5
                        val newStatus = if (currentStatus == 4) 5 else 6
                        updateOrderStatus(currentStatus, newStatus, orderDetailId)
                    } ?: Toast.makeText(this, "H√£y ch·ªçn m·ªôt m√≥n tr∆∞·ªõc!", Toast.LENGTH_SHORT).show()
                }
                2 -> processPayment()
            }
        }

        btnAddFood.setOnClickListener {
            Log.d("OrderDetailActivity", "B·∫•m n√∫t th√™m m√≥n, s·ª≠ d·ª•ng orderId: $orderId, b√†n: $idBan")

            if (orderId == -1) {
                Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng h·ª£p l·ªá!", Toast.LENGTH_SHORT).show()

            }

            val intent = Intent(this, FoodActivity::class.java)
            intent.putExtra("TABLE_NUMBER", idBan.toString())  // ‚úÖ ƒê·∫£m b·∫£o b√†n ƒë∆∞·ª£c truy·ªÅn ƒë√∫ng
            intent.putExtra("ORDER_ID", orderId) // ‚úÖ ƒê·∫£m b·∫£o truy·ªÅn ƒë√∫ng orderId
            startActivity(intent)
        }
    }
    private fun loadOrderDetails(status: Int) {
        val statusId = when (status) {
            0 -> 4
            1 -> 5
            2 -> 6
            else -> 4
        }

        Log.d("OrderDetailActivity", "üîé ƒêang t·∫£i m√≥n ƒÉn cho orderId: $orderId, b√†n: $idBan, tr·∫°ng th√°i: $statusId")

        val items: List<OrderDetail> = dbHelper.getOrderDetailsByStatus(orderId, statusId)

        Log.d("OrderDetailActivity", "üìå S·ªë l∆∞·ª£ng m√≥n l·∫•y ƒë∆∞·ª£c: ${items.size}")

        adapter = OrderDetailAdapter(items) { orderDetailId ->
            selectedOrderDetailId = orderDetailId
            btnAction.visibility = if (statusId == 4 || statusId == 5) View.VISIBLE else View.GONE
        }
        recyclerView.adapter = adapter
        // ‚úÖ Ki·ªÉm tra xem t·∫•t c·∫£ m√≥n c√≥ ph·∫£i ƒë·ªÅu l√† "ƒê√£ xong" kh√¥ng
        val allCompleted = dbHelper.areAllItemsCompleted(orderId)

// ‚úÖ Hi·ªÉn th·ªã n√∫t "Thanh to√°n" n·∫øu t·∫•t c·∫£ m√≥n ƒë√£ ho√†n th√†nh
        btnAction.visibility = if (statusId == 6 && allCompleted) View.VISIBLE else View.GONE


        // C·∫≠p nh·∫≠t n·ªôi dung n√∫t d·ª±a theo tr·∫°ng th√°i
        when (status) {
            0 -> btnAction.text = "Chuy·ªÉn sang ƒêang l√†m"
            1 -> btnAction.text = "Chuy·ªÉn sang ƒê√£ xong"
            2 -> btnAction.text = "Thanh to√°n"
        }
    }


    private fun updateOrderStatus(currentStatus: Int, newStatus: Int, orderDetailId: Int) {
        val success = dbHelper.updateOrderStatus(orderId, currentStatus, newStatus, orderDetailId)
        if (success) {
            loadOrderDetails(tabLayout.selectedTabPosition)
        } else {
            Toast.makeText(this, "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!", Toast.LENGTH_SHORT).show()
        }
    }

    private fun processPayment() {
        if (idBan == -1) {
            Toast.makeText(this, "L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c b√†n!", Toast.LENGTH_SHORT).show()
            return
        }
        val totalAmount = dbHelper.getTotalAmount(orderId) // üî• G·ªçi h√†m v·ª´a t·∫°o ƒë·ªÉ l·∫•y t·ªïng ti·ªÅn
        val paymentMethods = arrayOf("Ti·ªÅn m·∫∑t", "Chuy·ªÉn kho·∫£n")

        val builder = AlertDialog.Builder(this)
        builder.setTitle("Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n")
            .setItems(paymentMethods) { _, which ->
                val selectedMethod = paymentMethods[which]
                if (selectedMethod == "Chuy·ªÉn kho·∫£n") {
                    showQRCodeDialog(orderId, totalAmount)
                } else {
                    confirmPayment(selectedMethod)
                }
            }
            .show()
    }
    private fun showQRCodeDialog(orderId: Int, amount: Int) {
        val qrCodeData = generateQRCodeData(orderId, amount)
        val imageView = ImageView(this)
        Picasso.get().load(qrCodeData).into(imageView)

        val builder = AlertDialog.Builder(this)
        builder.setTitle("Qu√©t m√£ QR ƒë·ªÉ thanh to√°n")
            .setView(imageView)
            .setPositiveButton("ƒê√£ chuy·ªÉn kho·∫£n") { _, _ ->
                confirmPayment("Chuy·ªÉn kho·∫£n") // ‚úÖ Kh√°ch t·ª± x√°c nh·∫≠n thanh to√°n
            }
            .setNegativeButton("H·ªßy", null)
            .show()
    }


    private fun generateQRCodeData(orderId: Int, amount: Int): String {
        val transferMessage = "Thanh toan don hang #$orderId".replace(" ", "%20")
        val bankCode = "ACB" // ‚úÖ M√£ ng√¢n h√†ng ACB
        val accountNumber = "12264277" // ‚úÖ S·ªë t√†i kho·∫£n ACB c·ªßa b·∫°n

        // ‚úÖ S·ª≠ d·ª•ng API VietQR ch√≠nh th·ª©c ƒë·ªÉ t·∫°o m√£ QR h·ª£p l·ªá
        return "https://img.vietqr.io/image/$bankCode-$accountNumber-qr_only.png?amount=$amount&addInfo=$transferMessage"
    }



    private fun generateQRCodeBitmap(data: String): Bitmap {
        val qrCodeWriter = QRCodeWriter()
        val bitMatrix = qrCodeWriter.encode(data, BarcodeFormat.QR_CODE, 500, 500)
        val width = bitMatrix.width
        val height = bitMatrix.height
        val bmp = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565)

        for (x in 0 until width) {
            for (y in 0 until height) {
                bmp.setPixel(x, y, if (bitMatrix[x, y]) Color.BLACK else Color.WHITE)
            }
        }

        return bmp
    }


    private fun confirmPayment(paymentMethod: String) {
        val totalAmount = dbHelper.getTotalAmount(orderId) // üî• G·ªçi h√†m ƒë·ªÉ l·∫•y t·ªïng ti·ªÅn
        val updated = dbHelper.payOrder(orderId, totalAmount, paymentMethod)

        if (!updated) {
            Toast.makeText(this, "L·ªói: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n!", Toast.LENGTH_SHORT).show()
            return
        }

        dbHelper.updateTableStatus(idBan, 1) // ƒê·∫∑t b√†n v·ªÅ tr·∫°ng th√°i "Tr·ªëng"
        val timestamp = System.currentTimeMillis() / 1000
        val newOrderId = dbHelper.insertOrder(idBan, timestamp, 0, 2)

        if (newOrderId != -1L) {
            orderId = newOrderId.toInt()
            loadOrderDetails(0)
        }

        val intent = Intent(this, OrderActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
        startActivity(intent)
        finish()
    }


}
